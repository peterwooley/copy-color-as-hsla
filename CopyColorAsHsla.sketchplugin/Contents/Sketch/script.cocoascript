// Copy Color as HSLA

var copyFillColor = function(context) {
  var selection = context.selection,
      doc = context.document,
      layer,
      color;

  if(!selection.count()) {
    doc.showMessage("Select a layer to copy its fill color as HSLA.");
    return false;
  }

  layer = selection[0];

  if(layer.style) {
    if (layer.style().fills().count() > 0) {
      color = layer.style().fills().firstObject().color();
    }
  }

  copyColorAsHslaToClipboard(color, doc, "fill");
};


var copyBorderColor = function(context) {
  var selection = context.selection,
      doc = context.document,
      layer,
      color;

  if(!selection.count()) {
    doc.showMessage("Select a layer to copy its border color as HSLA.");
    return false;
  }

  layer = selection[0];

  if(layer.style) {
    if (layer.style().borders().count() > 0) {
      color = layer.style().borders().firstObject().color();
    }
  }

  copyColorAsHslaToClipboard(color, doc, "border");
};


var copyTextColor = function(context) {
  var selection = context.selection,
      doc = context.document,
      layer,
      color;

  if(!selection.count()) {
    doc.showMessage("Select a layer to copy its text color as HSLA.");
    return false;
  }

  layer = selection[0];

  if(layer.style) {
    if ([layer class] === MSTextLayer) {
      color = layer.textColor();
    }
  }

  copyColorAsHslaToClipboard(color, doc, "text");
};

var copyColorAsHslaToClipboard = function(color, doc, type) {
  var hsla = colorToHsla(color);
  clipboard.set(hsla);
  doc.showMessage("Copied " + type + " color " + hsla + " to clipboard.");
}

// https://github.com/getflourish/Sketch-Style-Inventory/search?utf8=âœ“&q=rgb&type=Code
var colorToHsla = function(color) {
  log(color);
  var hsla = rgbaToHsla(String(Math.ceil(color.red().toFixed(2) * 255)), String(Math.ceil(color.green().toFixed(2) * 255)), String(Math.ceil(color.blue().toFixed(2) * 255)), String(color.alpha().toFixed(2)));
  
  if(hsla[3] == "1.00") {
    return "hsl("+hsla[0]+","+hsla[1]+","+hsla[2]+")";
  } else {
    return "hsla("+hsla[0]+","+hsla[1]+","+hsla[2]+","+hsla[3]+")";
  }
};

/*
* https://gmigdos.wordpress.com/2011/01/13/javascript-convert-rgb-values-to-hsl/
* Converts an RGB color to HSL
* Result : 3-element array containing the HSL values
*/
function rgbaToHsla(r, g, b, a){
    var r1 = r / 255;
    var g1 = g / 255;
    var b1 = b / 255;
 
    var maxColor = Math.max(r1,g1,b1);
    var minColor = Math.min(r1,g1,b1);
    //Calculate L:
    var L = (maxColor + minColor) / 2 ;
    var S = 0;
    var H = 0;
    if(maxColor != minColor){
        //Calculate S:
        if(L < 0.5){
            S = (maxColor - minColor) / (maxColor + minColor);
        }else{
            S = (maxColor - minColor) / (2.0 - maxColor - minColor);
        }
        //Calculate H:
        if(r1 == maxColor){
            H = (g1-b1) / (maxColor - minColor);
        }else if(g1 == maxColor){
            H = 2.0 + (b1 - r1) / (maxColor - minColor);
        }else{
            H = 4.0 + (r1 - g1) / (maxColor - minColor);
        }
    }
 
    L = Math.round(L * 100) + "%";
    S = Math.round(S * 100) + "%";
    H = H * 60;
    if(H<0){
        H += 360;
    }
    H = Math.round(H);
    var result = [H, S, L, a];
    return result;
}

// Using JSTalk clipboard handling snippet from https://gist.github.com/uhunkler/5465857 by Urs Hunkler
var clipboard = {
  // store the pasetboard object
  pasteBoard : null,
 
  // save the pasteboard object
  init : function()
  {
    this.pasteBoard = NSPasteboard.generalPasteboard();
  },
  // set the clipboard to the given text
  set : function( text )
  {
    if( typeof text === 'undefined' ) return null;
 
    if( !this.pasteBoard )
      this.init();
 
    this.pasteBoard.declareTypes_owner( [ NSPasteboardTypeString ], null );
    this.pasteBoard.setString_forType( text, NSPasteboardTypeString );
 
    return true;
  },
  // get text from the clipbaoard
  get : function()
  {
    if( !this.pasteBoard )
      this.init();
 
    var text = this.pasteBoard.stringForType( NSPasteboardTypeString );
    
    return text.toString();
  }
};
